---
- hosts: workers
  become: true
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
      - containerd

  - name: Creates directory for containerd
    file:
      path: /etc/containerd
      state: directory

  - name: Creates kubelet directory
    file:
      path: /etc/default/kubelet
      state: touch
      mode: 0644

  - name: Configure containerd and start the service
    command: containerd config default  /etc/containerd/config.toml

  - name: Add the overlay module
    modprobe:
      name: overlay
      state: present

  - name: Add the br_netfilter module
    modprobe:
      name: br_netfilter
      state: present

  - sysctl:
      name: net.bridge.bridge-nf-call-iptables
      value: 1
      sysctl_set: yes
      state: present
      reload: yes

  - sysctl:
      name: net.ipv4.ip_forward
      value: 1
      sysctl_set: yes
      state: present
      reload: yes

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

  - name: Configure worker 01 node ip
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ worker_01_node_ip }}
    when: inventory_hostname == groups['workers'][0]
    with_items: "{{ groups['workers'] }}"

  - name: Configure worker 02 node ip
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ worker_02_node_ip }}
    when: inventory_hostname == groups['workers'][1]
    with_items: "{{ groups['workers'] }}"

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  - name: Copy the join command to server location
    copy: src=join-command dest=/tmp/join-command.sh mode=0777

  - name: Join the node to cluster
    command: sh /tmp/join-command.sh
    ignore_errors: yes
